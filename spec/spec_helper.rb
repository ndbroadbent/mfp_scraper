# This file was generated by the `rspec --init` command. Conventionally, all
# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
# Require this file using `require "spec_helper"` to ensure that it is only
# loaded once.
#
# See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration
require 'vcr'
require 'mfp_scraper'
require 'debugger'

VCR.configure do |config|
  config.cassette_library_dir = 'spec/cassettes'
  config.hook_into :webmock
  config.configure_rspec_metadata!
  config.ignore_localhost = true
  config.default_cassette_options = { record: :new_episodes }

  config.filter_sensitive_data('<VALID_PASSWORD>') { ENV['MFP_USERNAME'] }
  config.filter_sensitive_data('<VALID_USERNAME>') { ENV['MFP_PASSWORD'] }
end

module AuthenticationHelpers
  def client_with_valid_credentials
    MFPScraper.new(username: ENV['MFP_USERNAME'] || '<VALID_USERNAME>', password: ENV['MFP_PASSWORD'] || '<VALID_PASSWORD>')
  end

  def authenticated_client
    VCR.use_cassette("authenticated_mfp_client", :record => :new_episodes) do
      client = client_with_valid_credentials
      client.authenticate!
      client
    end
  end
end

class RecordedMFPScraper
  def initialize(client)
    @client = client
  end

  # VCR each method call separately
  def method_missing(method_name, *args)
    return super unless @client.respond_to?(method_name)

    VCR.use_cassette(method_name, :record => :new_episodes) do
      @client.send(method_name, *args)
    end
  end
end

RSpec.configure do |config|
  config.treat_symbols_as_metadata_keys_with_true_values = true
  config.run_all_when_everything_filtered = true
  config.filter_run :focus

  # Run specs in random order to surface order dependencies. If you find an
  # order dependency and want to debug it, you can fix the order by providing
  # the seed, which is printed after each run.
  #     --seed 1234
  config.order = 'random'

  config.include AuthenticationHelpers
end
